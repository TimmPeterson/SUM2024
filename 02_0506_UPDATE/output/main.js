(function () {
  'use strict';

  //const { Pane } = require("./node_modules/tweakpane/dist/tweakpane.js");

  let canvas, gl, timeLoc;

  let MxLoc, MyLoc, MzLoc, rLoc, gLoc, bLoc, dxLoc, dyLoc;

  let typeOfFractal = 0, typeLoc;

  // OpenGL initialization function
  function initGL() {
    canvas = document.getElementById("myCan");
    canvas.addEventListener("mousemove", (e) => onMouseMove(e));
    canvas.addEventListener("wheel", (e) => onScroll(e));
    canvas.addEventListener("touchstart", (e) => onTouchStart(e));
    canvas.addEventListener("touchmove", (e) => onTouchMove(e));
    canvas.addEventListener("touchend", (e) => onTouchEnd(e));

    canvas.hm = Hammer(canvas);
    canvas.hm.get("tap").set({ enable: true });
    canvas.hm.on("tap", () => {
      if (typeOfFractal == 0)
        typeOfFractal = 1;
      else
        typeOfFractal = 0;
      StartX = StartY = -2;
      EndX = EndY = 2;
    });

    gl = canvas.getContext("webgl2");
    gl.clearColor(0.3, 0.47, 0.8, 1);

    // Shader creation
    let vs_txt = `#version 300 es
  precision highp float;
  in vec3 InPosition;
    
  out vec2 DrawPos;
  uniform float Time;
 
  void main( void )
  {
    gl_Position = vec4(InPosition, 1);
    DrawPos = InPosition.xy;
  }
  `;

    let fs_txt = `#version 300 es
  precision highp float;
  out vec4 OutColor;
  
  in vec2 DrawPos;
  uniform float Time;
  uniform float Mx;
  uniform float My;
  uniform float Mz;
  uniform float R;
  uniform float G;
  uniform float B;
  uniform float dX;
  uniform float dY;
  uniform float StartX;
  uniform float StartY;
  uniform float EndX;
  uniform float EndY;
  uniform float TypeOfFractal;

  vec2 CmplMulCmpl( vec2 A, vec2 B )
  {
    return vec2(A.x * B.x - A.y * B.y, A.x * B.y + A.y * B.x);
  }

  vec2 CmplDivCmpl( vec2 A, vec2 B )
  {
    return vec2(dot(A, B), (A.y * B.x - A.x * B.y)) / dot(B, B);
  }

  vec2 f( vec2 Z ) 
  {
    return CmplMulCmpl(Z, Z);//CmplMulCmpl(CmplMulCmpl(Z, Z), Z);
  }

  void main( void )
  {
    int n = 0;  
    vec2 Z, Z0;

    Z = (gl_FragCoord.xy / vec2(2000.0) - 0.5) * 2.0;
    Z.x = (Z.x + 1.0) / 2.0 * (EndX - StartX) + StartX;
    Z.y = (Z.y + 1.0) / 2.0 * (EndY - StartY) + StartY;
    Z0 = Z;//vec2(0.5, 0.32);

    while (n < 255 && dot(Z, Z) < 4.0)
    {
      if (TypeOfFractal == 0.0)
      {
        Z = f(Z); Z = Z + Z0;
      }
      else
        Z = Z - CmplDivCmpl(CmplMulCmpl(Z, CmplMulCmpl(Z, Z)) - .1, 3.0 * CmplMulCmpl(Z, Z)); //f(Z);
      n++;
    }
    OutColor = vec4(vec3(vec3(float(n) / 250.0, float(n) / 230.0, float(n) / 240.0)), 1.0);
  }
  `;
    let vs = loadShader(gl.VERTEX_SHADER, vs_txt),
      fs = loadShader(gl.FRAGMENT_SHADER, fs_txt),
      prg = gl.createProgram();
    gl.attachShader(prg, vs);
    gl.attachShader(prg, fs);
    gl.linkProgram(prg);
    if (!gl.getProgramParameter(prg, gl.LINK_STATUS)) {
      let buf = gl.getProgramInfoLog(prg);
      console.log("Shader program link fail: " + buf);
    }

    // Vertex buffer creation
    const size = 1;
    const vertexes = [
      -size,
      size,
      0,
      -size,
      -size,
      0,
      size,
      size,
      0,
      size,
      -size,
      0,
    ];
    const posLoc = gl.getAttribLocation(prg, "InPosition");
    let vertexArray = gl.createVertexArray();
    gl.bindVertexArray(vertexArray);
    let vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexes), gl.STATIC_DRAW);
    if (posLoc != -1) {
      gl.vertexAttribPointer(posLoc, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(posLoc);
    }

    // Uniform data
    timeLoc = gl.getUniformLocation(prg, "Time");

    // Getting location from shader
    MxLoc = gl.getUniformLocation(prg, "Mx");
    MyLoc = gl.getUniformLocation(prg, "My");
    MzLoc = gl.getUniformLocation(prg, "Mz");
    rLoc = gl.getUniformLocation(prg, "R");
    gLoc = gl.getUniformLocation(prg, "G");
    bLoc = gl.getUniformLocation(prg, "B");
    dxLoc = gl.getUniformLocation(prg, "dX");
    dyLoc = gl.getUniformLocation(prg, "dY");
    LocEx = gl.getUniformLocation(prg, "EndX");
    LocSx = gl.getUniformLocation(prg, "StartX");
    LocEy = gl.getUniformLocation(prg, "EndY");
    LocSy = gl.getUniformLocation(prg, "StartY");
    typeLoc = gl.getUniformLocation(prg, "TypeOfFractal");

    gl.useProgram(prg);

    //const pane = new Pane();
    //pane.addBinding(PARAMS, "background");
  } // End of 'initGL' function

  // Load and compile shader function
  function loadShader(shaderType, shaderSource) {
    const shader = gl.createShader(shaderType);
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      let buf = gl.getShaderInfoLog(shader);
      console.log("Shader compile fail: " + buf);
    }
    return shader;
  } // End of 'loadShader' function

  // 
  let LocSx, LocSy, LocEx, LocEy;
  let StartX = -2, StartY = -2, EndX = 2, EndY = 2;

  // Main render frame function
  function render() {
    // console.log(`Frame ${x++}`);
    gl.clear(gl.COLOR_BUFFER_BIT);

    if (timeLoc != -1) {
      const date = new Date();
      let t =
        date.getMinutes() * 60 +
        date.getSeconds() +
        date.getMilliseconds() / 1000;

      gl.uniform1f(timeLoc, t);
      gl.uniform1f(MxLoc, Mx);
      gl.uniform1f(MyLoc, My);
      gl.uniform1f(MzLoc, Mz);
      gl.uniform1f(rLoc, PARAMS.background.r);
      gl.uniform1f(gLoc, PARAMS.background.g);
      gl.uniform1f(bLoc, PARAMS.background.b);
      gl.uniform1f(dxLoc, dx);
      gl.uniform1f(dyLoc, dy);
      gl.uniform1f(LocSx, StartX);
      gl.uniform1f(LocSy, StartY);
      gl.uniform1f(LocEx, EndX);
      gl.uniform1f(LocEy, EndY);
      gl.uniform1f(typeLoc, typeOfFractal);
    }
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  } // End of 'render' function

  console.log("CGSG forever!!! mylib.js imported");

  let Mx = 0,
    My = 0,
    Mz = 1,
    dx = 0, dy = 0;
  const PARAMS = {
    //key: "#ff0055ff",
    background: { r: 255.0, g: 255.0, b: 255.0 },
  };

  function onScroll(event) {
    let sz = 0.001;

    event.preventDefault();
    Mz += event.deltaY * sz;

    let mx = (Mx / 2000.0 - 0.5) * 2;
    let my = (1.0 - My / 2000.0 - 0.5) * 2;
    let NewStartX, NewEndX, NewStartY, NewEndY;

    let f;
    if (event.deltaY < 0)
      f = 0.9;
    else
      f = 1 / .9;

    let nmx = (mx + 1) / 2 * (EndX - StartX) + StartX;
    let nmy = (my + 1) / 2 * (EndY - StartY) + StartY;

    NewStartX = nmx - f * (nmx - StartX);
    NewEndX = nmx - f * (nmx - EndX);

    NewStartY = nmy - f * (nmy - StartY);
    NewEndY = nmy - f * (nmy - EndY);

    StartX = NewStartX;
    StartY = NewStartY;
    EndX = NewEndX;
    EndY = NewEndY;
  }

  function onMouseMove(event) {
    if (event.buttons == 1) {
      let dx = EndX - StartX;
      let dy = EndY - StartY;
      StartX -= event.movementX / 2000.0 * dx;
      EndX -= event.movementX / 2000.0 * dx;
      StartY += event.movementY / 2000.0 * dy;
      EndY += event.movementY / 2000.0 * dy;
    }
    Mx = event.offsetX;
    My = event.offsetY;
    event.preventDefault();
  }

  let scaling = false;
  let prev_dist = 0;
  function onTouchStart(e) {
    if (e.touches.length === 2) {
      scaling = true;
      prev_dist = Math.hypot(
        e.touches[0].pageX - e.touches[1].pageX,
        e.touches[0].pageY - e.touches[1].pageY);
      pinchStart(e);
    }
  }

  function onTouchMove(e) {
    e.preventDefault();
    if (scaling) {
      let NewStartX, NewEndX, NewStartY, NewEndY;

      let dist = Math.hypot(
        e.touches[0].pageX - e.touches[1].pageX,
        e.touches[0].pageY - e.touches[1].pageY);
      let delta = dist - prev_dist;
      prev_dist = dist;

      let center = {
        X: (e.touches[0].pageX + e.touches[1].pageX) / 2.0,
        Y: (e.touches[0].pageY + e.touches[1].pageY) / 2.0,
      };

      let mx = (center.X / 2000.0 - 0.5) * 2;
      let my = (1.0 - center.Y / 2000.0 - 0.5) * 2;

      let f;
      if (delta > 0)
        f = 0.95;
      else
        f = 1 / .95;

      let nmx = (mx + 1) / 2 * (EndX - StartX) + StartX;
      let nmy = (my + 1) / 2 * (EndY - StartY) + StartY;

      NewStartX = nmx - f * (nmx - StartX);
      NewEndX = nmx - f * (nmx - EndX);

      NewStartY = nmy - f * (nmy - StartY);
      NewEndY = nmy - f * (nmy - EndY);

      StartX = NewStartX;
      StartY = NewStartY;
      EndX = NewEndX;
      EndY = NewEndY;
    }
  }

  function onTouchEnd(e) {
    if (scaling) {
      pinchEnd(e);
      scaling = false;
    }
  }

  window.addEventListener("load", () => {
    initGL();
    const draw = () => {
      render();
      window.requestAnimationFrame(draw);
    };
    draw();
  });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2NvbnN0IHsgUGFuZSB9ID0gcmVxdWlyZShcIi4vbm9kZV9tb2R1bGVzL3R3ZWFrcGFuZS9kaXN0L3R3ZWFrcGFuZS5qc1wiKTtcclxuXHJcbmxldCBjYW52YXMsIGdsLCB0aW1lTG9jO1xyXG5cclxubGV0IE14TG9jLCBNeUxvYywgTXpMb2MsIHJMb2MsIGdMb2MsIGJMb2MsIGR4TG9jLCBkeUxvYztcclxuXHJcbmxldCB0eXBlT2ZGcmFjdGFsID0gMCwgdHlwZUxvYztcclxuXHJcbi8vIE9wZW5HTCBpbml0aWFsaXphdGlvbiBmdW5jdGlvblxyXG5mdW5jdGlvbiBpbml0R0woKSB7XHJcbiAgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUNhblwiKTtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZSkgPT4gb25Nb3VzZU1vdmUoZSkpO1xyXG4gIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgKGUpID0+IG9uU2Nyb2xsKGUpKTtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgKGUpID0+IG9uVG91Y2hTdGFydChlKSk7XHJcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgKGUpID0+IG9uVG91Y2hNb3ZlKGUpKTtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIChlKSA9PiBvblRvdWNoRW5kKGUpKTtcclxuXHJcbiAgY2FudmFzLmhtID0gSGFtbWVyKGNhbnZhcyk7XHJcbiAgY2FudmFzLmhtLmdldChcInRhcFwiKS5zZXQoeyBlbmFibGU6IHRydWUgfSk7XHJcbiAgY2FudmFzLmhtLm9uKFwidGFwXCIsICgpID0+IHtcclxuICAgIGlmICh0eXBlT2ZGcmFjdGFsID09IDApXHJcbiAgICAgIHR5cGVPZkZyYWN0YWwgPSAxO1xyXG4gICAgZWxzZVxyXG4gICAgICB0eXBlT2ZGcmFjdGFsID0gMDtcclxuICAgIFN0YXJ0WCA9IFN0YXJ0WSA9IC0yO1xyXG4gICAgRW5kWCA9IEVuZFkgPSAyO1xyXG4gIH0pO1xyXG5cclxuICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIpO1xyXG4gIGdsLmNsZWFyQ29sb3IoMC4zLCAwLjQ3LCAwLjgsIDEpO1xyXG5cclxuICAvLyBTaGFkZXIgY3JlYXRpb25cclxuICBsZXQgdnNfdHh0ID0gYCN2ZXJzaW9uIDMwMCBlc1xyXG4gIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxuICBpbiB2ZWMzIEluUG9zaXRpb247XHJcbiAgICBcclxuICBvdXQgdmVjMiBEcmF3UG9zO1xyXG4gIHVuaWZvcm0gZmxvYXQgVGltZTtcclxuIFxyXG4gIHZvaWQgbWFpbiggdm9pZCApXHJcbiAge1xyXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KEluUG9zaXRpb24sIDEpO1xyXG4gICAgRHJhd1BvcyA9IEluUG9zaXRpb24ueHk7XHJcbiAgfVxyXG4gIGA7XHJcblxyXG4gIGxldCBmc190eHQgPSBgI3ZlcnNpb24gMzAwIGVzXHJcbiAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xyXG4gIG91dCB2ZWM0IE91dENvbG9yO1xyXG4gIFxyXG4gIGluIHZlYzIgRHJhd1BvcztcclxuICB1bmlmb3JtIGZsb2F0IFRpbWU7XHJcbiAgdW5pZm9ybSBmbG9hdCBNeDtcclxuICB1bmlmb3JtIGZsb2F0IE15O1xyXG4gIHVuaWZvcm0gZmxvYXQgTXo7XHJcbiAgdW5pZm9ybSBmbG9hdCBSO1xyXG4gIHVuaWZvcm0gZmxvYXQgRztcclxuICB1bmlmb3JtIGZsb2F0IEI7XHJcbiAgdW5pZm9ybSBmbG9hdCBkWDtcclxuICB1bmlmb3JtIGZsb2F0IGRZO1xyXG4gIHVuaWZvcm0gZmxvYXQgU3RhcnRYO1xyXG4gIHVuaWZvcm0gZmxvYXQgU3RhcnRZO1xyXG4gIHVuaWZvcm0gZmxvYXQgRW5kWDtcclxuICB1bmlmb3JtIGZsb2F0IEVuZFk7XHJcbiAgdW5pZm9ybSBmbG9hdCBUeXBlT2ZGcmFjdGFsO1xyXG5cclxuICB2ZWMyIENtcGxNdWxDbXBsKCB2ZWMyIEEsIHZlYzIgQiApXHJcbiAge1xyXG4gICAgcmV0dXJuIHZlYzIoQS54ICogQi54IC0gQS55ICogQi55LCBBLnggKiBCLnkgKyBBLnkgKiBCLngpO1xyXG4gIH1cclxuXHJcbiAgdmVjMiBDbXBsRGl2Q21wbCggdmVjMiBBLCB2ZWMyIEIgKVxyXG4gIHtcclxuICAgIHJldHVybiB2ZWMyKGRvdChBLCBCKSwgKEEueSAqIEIueCAtIEEueCAqIEIueSkpIC8gZG90KEIsIEIpO1xyXG4gIH1cclxuXHJcbiAgdmVjMiBmKCB2ZWMyIFogKSBcclxuICB7XHJcbiAgICByZXR1cm4gQ21wbE11bENtcGwoWiwgWik7Ly9DbXBsTXVsQ21wbChDbXBsTXVsQ21wbChaLCBaKSwgWik7XHJcbiAgfVxyXG5cclxuICB2b2lkIG1haW4oIHZvaWQgKVxyXG4gIHtcclxuICAgIGludCBuID0gMDsgIFxyXG4gICAgdmVjMiBaLCBaMDtcclxuXHJcbiAgICBaID0gKGdsX0ZyYWdDb29yZC54eSAvIHZlYzIoMjAwMC4wKSAtIDAuNSkgKiAyLjA7XHJcbiAgICBaLnggPSAoWi54ICsgMS4wKSAvIDIuMCAqIChFbmRYIC0gU3RhcnRYKSArIFN0YXJ0WDtcclxuICAgIFoueSA9IChaLnkgKyAxLjApIC8gMi4wICogKEVuZFkgLSBTdGFydFkpICsgU3RhcnRZO1xyXG4gICAgWjAgPSBaOy8vdmVjMigwLjUsIDAuMzIpO1xyXG5cclxuICAgIHdoaWxlIChuIDwgMjU1ICYmIGRvdChaLCBaKSA8IDQuMClcclxuICAgIHtcclxuICAgICAgaWYgKFR5cGVPZkZyYWN0YWwgPT0gMC4wKVxyXG4gICAgICB7XHJcbiAgICAgICAgWiA9IGYoWik7IFogPSBaICsgWjA7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICAgIFogPSBaIC0gQ21wbERpdkNtcGwoQ21wbE11bENtcGwoWiwgQ21wbE11bENtcGwoWiwgWikpIC0gLjEsIDMuMCAqIENtcGxNdWxDbXBsKFosIFopKTsgLy9mKFopO1xyXG4gICAgICBuKys7XHJcbiAgICB9XHJcbiAgICBPdXRDb2xvciA9IHZlYzQodmVjMyh2ZWMzKGZsb2F0KG4pIC8gMjUwLjAsIGZsb2F0KG4pIC8gMjMwLjAsIGZsb2F0KG4pIC8gMjQwLjApKSwgMS4wKTtcclxuICB9XHJcbiAgYDtcclxuICBsZXQgdnMgPSBsb2FkU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIsIHZzX3R4dCksXHJcbiAgICBmcyA9IGxvYWRTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSLCBmc190eHQpLFxyXG4gICAgcHJnID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gIGdsLmF0dGFjaFNoYWRlcihwcmcsIHZzKTtcclxuICBnbC5hdHRhY2hTaGFkZXIocHJnLCBmcyk7XHJcbiAgZ2wubGlua1Byb2dyYW0ocHJnKTtcclxuICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJnLCBnbC5MSU5LX1NUQVRVUykpIHtcclxuICAgIGxldCBidWYgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcmcpO1xyXG4gICAgY29uc29sZS5sb2coXCJTaGFkZXIgcHJvZ3JhbSBsaW5rIGZhaWw6IFwiICsgYnVmKTtcclxuICB9XHJcblxyXG4gIC8vIFZlcnRleCBidWZmZXIgY3JlYXRpb25cclxuICBjb25zdCBzaXplID0gMTtcclxuICBjb25zdCB2ZXJ0ZXhlcyA9IFtcclxuICAgIC1zaXplLFxyXG4gICAgc2l6ZSxcclxuICAgIDAsXHJcbiAgICAtc2l6ZSxcclxuICAgIC1zaXplLFxyXG4gICAgMCxcclxuICAgIHNpemUsXHJcbiAgICBzaXplLFxyXG4gICAgMCxcclxuICAgIHNpemUsXHJcbiAgICAtc2l6ZSxcclxuICAgIDAsXHJcbiAgXTtcclxuICBjb25zdCBwb3NMb2MgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcmcsIFwiSW5Qb3NpdGlvblwiKTtcclxuICBsZXQgdmVydGV4QXJyYXkgPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xyXG4gIGdsLmJpbmRWZXJ0ZXhBcnJheSh2ZXJ0ZXhBcnJheSk7XHJcbiAgbGV0IHZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpO1xyXG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHZlcnRleGVzKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gIGlmIChwb3NMb2MgIT0gLTEpIHtcclxuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zTG9jLCAzLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zTG9jKTtcclxuICB9XHJcblxyXG4gIC8vIFVuaWZvcm0gZGF0YVxyXG4gIHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcIlRpbWVcIik7XHJcblxyXG4gIC8vIEdldHRpbmcgbG9jYXRpb24gZnJvbSBzaGFkZXJcclxuICBNeExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwiTXhcIik7XHJcbiAgTXlMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcIk15XCIpO1xyXG4gIE16TG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJNelwiKTtcclxuICByTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJSXCIpO1xyXG4gIGdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcIkdcIik7XHJcbiAgYkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwiQlwiKTtcclxuICBkeExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwiZFhcIik7XHJcbiAgZHlMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcImRZXCIpO1xyXG4gIExvY0V4ID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJFbmRYXCIpO1xyXG4gIExvY1N4ID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJTdGFydFhcIik7XHJcbiAgTG9jRXkgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcIkVuZFlcIik7XHJcbiAgTG9jU3kgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcIlN0YXJ0WVwiKTtcclxuICB0eXBlTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJUeXBlT2ZGcmFjdGFsXCIpO1xyXG5cclxuICBnbC51c2VQcm9ncmFtKHByZyk7XHJcblxyXG4gIC8vY29uc3QgcGFuZSA9IG5ldyBQYW5lKCk7XHJcbiAgLy9wYW5lLmFkZEJpbmRpbmcoUEFSQU1TLCBcImJhY2tncm91bmRcIik7XHJcbn0gLy8gRW5kIG9mICdpbml0R0wnIGZ1bmN0aW9uXHJcblxyXG4vLyBMb2FkIGFuZCBjb21waWxlIHNoYWRlciBmdW5jdGlvblxyXG5mdW5jdGlvbiBsb2FkU2hhZGVyKHNoYWRlclR5cGUsIHNoYWRlclNvdXJjZSkge1xyXG4gIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcclxuICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xyXG4gIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgbGV0IGJ1ZiA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcclxuICAgIGNvbnNvbGUubG9nKFwiU2hhZGVyIGNvbXBpbGUgZmFpbDogXCIgKyBidWYpO1xyXG4gIH1cclxuICByZXR1cm4gc2hhZGVyO1xyXG59IC8vIEVuZCBvZiAnbG9hZFNoYWRlcicgZnVuY3Rpb25cclxuXHJcbmxldCB4ID0gMTtcclxuXHJcbi8vIFxyXG5sZXQgTG9jU3gsIExvY1N5LCBMb2NFeCwgTG9jRXk7XHJcbmxldCBTdGFydFggPSAtMiwgU3RhcnRZID0gLTIsIEVuZFggPSAyLCBFbmRZID0gMjtcclxuXHJcbi8vIE1haW4gcmVuZGVyIGZyYW1lIGZ1bmN0aW9uXHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICAvLyBjb25zb2xlLmxvZyhgRnJhbWUgJHt4Kyt9YCk7XHJcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gIGlmICh0aW1lTG9jICE9IC0xKSB7XHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGxldCB0ID1cclxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCkgKiA2MCArXHJcbiAgICAgIGRhdGUuZ2V0U2Vjb25kcygpICtcclxuICAgICAgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMDA7XHJcblxyXG4gICAgZ2wudW5pZm9ybTFmKHRpbWVMb2MsIHQpO1xyXG4gICAgZ2wudW5pZm9ybTFmKE14TG9jLCBNeCk7XHJcbiAgICBnbC51bmlmb3JtMWYoTXlMb2MsIE15KTtcclxuICAgIGdsLnVuaWZvcm0xZihNekxvYywgTXopO1xyXG4gICAgZ2wudW5pZm9ybTFmKHJMb2MsIFBBUkFNUy5iYWNrZ3JvdW5kLnIpO1xyXG4gICAgZ2wudW5pZm9ybTFmKGdMb2MsIFBBUkFNUy5iYWNrZ3JvdW5kLmcpO1xyXG4gICAgZ2wudW5pZm9ybTFmKGJMb2MsIFBBUkFNUy5iYWNrZ3JvdW5kLmIpO1xyXG4gICAgZ2wudW5pZm9ybTFmKGR4TG9jLCBkeCk7XHJcbiAgICBnbC51bmlmb3JtMWYoZHlMb2MsIGR5KTtcclxuICAgIGdsLnVuaWZvcm0xZihMb2NTeCwgU3RhcnRYKTtcclxuICAgIGdsLnVuaWZvcm0xZihMb2NTeSwgU3RhcnRZKTtcclxuICAgIGdsLnVuaWZvcm0xZihMb2NFeCwgRW5kWCk7XHJcbiAgICBnbC51bmlmb3JtMWYoTG9jRXksIEVuZFkpO1xyXG4gICAgZ2wudW5pZm9ybTFmKHR5cGVMb2MsIHR5cGVPZkZyYWN0YWwpO1xyXG4gIH1cclxuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxufSAvLyBFbmQgb2YgJ3JlbmRlcicgZnVuY3Rpb25cclxuXHJcbmNvbnNvbGUubG9nKFwiQ0dTRyBmb3JldmVyISEhIG15bGliLmpzIGltcG9ydGVkXCIpO1xyXG5cclxubGV0IE14ID0gMCxcclxuICBNeSA9IDAsXHJcbiAgTXogPSAxLFxyXG4gIGR4ID0gMCwgZHkgPSAwO1xyXG5jb25zdCBQQVJBTVMgPSB7XHJcbiAgLy9rZXk6IFwiI2ZmMDA1NWZmXCIsXHJcbiAgYmFja2dyb3VuZDogeyByOiAyNTUuMCwgZzogMjU1LjAsIGI6IDI1NS4wIH0sXHJcbn07XHJcbmxldCBwYW5lO1xyXG5sZXQgcGFuZVIsIHBhbmVHLCBwYW5lQjtcclxuXHJcbmZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcclxuICBsZXQgc3BlZWQgPSAzMCxcclxuICAgIHN6ID0gMC4wNDtcclxuXHJcbiAgaWYgKGV2ZW50LmtleSA9PSBcIkFycm93TGVmdFwiKSBkeCArPSBzcGVlZDtcclxuICBpZiAoZXZlbnQua2V5ID09IFwiQXJyb3dSaWdodFwiKSBkeCAtPSBzcGVlZDtcclxuICBpZiAoZXZlbnQua2V5ID09IFwiQXJyb3dVcFwiKSBkeSArPSBzcGVlZDtcclxuICBpZiAoZXZlbnQua2V5ID09IFwiQXJyb3dEb3duXCIpIGR5IC09IHNwZWVkO1xyXG4gIGlmIChldmVudC5rZXkgPT0gXCJQYWdlVXBcIikgTXogLT0gc3o7XHJcbiAgaWYgKGV2ZW50LmtleSA9PSBcIlBhZ2VEb3duXCIpIE16ICs9IHN6O1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblNjcm9sbChldmVudCkge1xyXG4gIGxldCBzeiA9IDAuMDAxO1xyXG5cclxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIE16ICs9IGV2ZW50LmRlbHRhWSAqIHN6O1xyXG5cclxuICBsZXQgbXggPSAoTXggLyAyMDAwLjAgLSAwLjUpICogMjtcclxuICBsZXQgbXkgPSAoMS4wIC0gTXkgLyAyMDAwLjAgLSAwLjUpICogMjtcclxuICBsZXQgTmV3U3RhcnRYLCBOZXdFbmRYLCBOZXdTdGFydFksIE5ld0VuZFk7XHJcblxyXG4gIGxldCBmO1xyXG4gIGlmIChldmVudC5kZWx0YVkgPCAwKVxyXG4gICAgZiA9IDAuOTtcclxuICBlbHNlXHJcbiAgICBmID0gMSAvIC45O1xyXG5cclxuICBsZXQgbm14ID0gKG14ICsgMSkgLyAyICogKEVuZFggLSBTdGFydFgpICsgU3RhcnRYO1xyXG4gIGxldCBubXkgPSAobXkgKyAxKSAvIDIgKiAoRW5kWSAtIFN0YXJ0WSkgKyBTdGFydFk7XHJcblxyXG4gIE5ld1N0YXJ0WCA9IG5teCAtIGYgKiAobm14IC0gU3RhcnRYKTtcclxuICBOZXdFbmRYID0gbm14IC0gZiAqIChubXggLSBFbmRYKTtcclxuXHJcbiAgTmV3U3RhcnRZID0gbm15IC0gZiAqIChubXkgLSBTdGFydFkpO1xyXG4gIE5ld0VuZFkgPSBubXkgLSBmICogKG5teSAtIEVuZFkpO1xyXG5cclxuICBTdGFydFggPSBOZXdTdGFydFg7XHJcbiAgU3RhcnRZID0gTmV3U3RhcnRZO1xyXG4gIEVuZFggPSBOZXdFbmRYO1xyXG4gIEVuZFkgPSBOZXdFbmRZO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudCkge1xyXG4gIGlmIChldmVudC5idXR0b25zID09IDEpIHtcclxuICAgIGxldCBkeCA9IEVuZFggLSBTdGFydFg7XHJcbiAgICBsZXQgZHkgPSBFbmRZIC0gU3RhcnRZO1xyXG4gICAgU3RhcnRYIC09IGV2ZW50Lm1vdmVtZW50WCAvIDIwMDAuMCAqIGR4O1xyXG4gICAgRW5kWCAtPSBldmVudC5tb3ZlbWVudFggLyAyMDAwLjAgKiBkeDtcclxuICAgIFN0YXJ0WSArPSBldmVudC5tb3ZlbWVudFkgLyAyMDAwLjAgKiBkeTtcclxuICAgIEVuZFkgKz0gZXZlbnQubW92ZW1lbnRZIC8gMjAwMC4wICogZHk7XHJcbiAgfVxyXG4gIE14ID0gZXZlbnQub2Zmc2V0WDtcclxuICBNeSA9IGV2ZW50Lm9mZnNldFk7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxufVxyXG5cclxubGV0IHNjYWxpbmcgPSBmYWxzZTtcclxubGV0IHByZXZfZGlzdCA9IDA7XHJcbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XHJcbiAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgIHNjYWxpbmcgPSB0cnVlO1xyXG4gICAgcHJldl9kaXN0ID0gTWF0aC5oeXBvdChcclxuICAgICAgZS50b3VjaGVzWzBdLnBhZ2VYIC0gZS50b3VjaGVzWzFdLnBhZ2VYLFxyXG4gICAgICBlLnRvdWNoZXNbMF0ucGFnZVkgLSBlLnRvdWNoZXNbMV0ucGFnZVkpO1xyXG4gICAgcGluY2hTdGFydChlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgaWYgKHNjYWxpbmcpIHtcclxuICAgIGxldCBOZXdTdGFydFgsIE5ld0VuZFgsIE5ld1N0YXJ0WSwgTmV3RW5kWTtcclxuXHJcbiAgICBsZXQgZGlzdCA9IE1hdGguaHlwb3QoXHJcbiAgICAgIGUudG91Y2hlc1swXS5wYWdlWCAtIGUudG91Y2hlc1sxXS5wYWdlWCxcclxuICAgICAgZS50b3VjaGVzWzBdLnBhZ2VZIC0gZS50b3VjaGVzWzFdLnBhZ2VZKTtcclxuICAgIGxldCBkZWx0YSA9IGRpc3QgLSBwcmV2X2Rpc3Q7XHJcbiAgICBwcmV2X2Rpc3QgPSBkaXN0O1xyXG5cclxuICAgIGxldCBjZW50ZXIgPSB7XHJcbiAgICAgIFg6IChlLnRvdWNoZXNbMF0ucGFnZVggKyBlLnRvdWNoZXNbMV0ucGFnZVgpIC8gMi4wLFxyXG4gICAgICBZOiAoZS50b3VjaGVzWzBdLnBhZ2VZICsgZS50b3VjaGVzWzFdLnBhZ2VZKSAvIDIuMCxcclxuICAgIH07XHJcblxyXG4gICAgbGV0IG14ID0gKGNlbnRlci5YIC8gMjAwMC4wIC0gMC41KSAqIDI7XHJcbiAgICBsZXQgbXkgPSAoMS4wIC0gY2VudGVyLlkgLyAyMDAwLjAgLSAwLjUpICogMjtcclxuXHJcbiAgICBsZXQgZjtcclxuICAgIGlmIChkZWx0YSA+IDApXHJcbiAgICAgIGYgPSAwLjk1O1xyXG4gICAgZWxzZVxyXG4gICAgICBmID0gMSAvIC45NTtcclxuXHJcbiAgICBsZXQgbm14ID0gKG14ICsgMSkgLyAyICogKEVuZFggLSBTdGFydFgpICsgU3RhcnRYO1xyXG4gICAgbGV0IG5teSA9IChteSArIDEpIC8gMiAqIChFbmRZIC0gU3RhcnRZKSArIFN0YXJ0WTtcclxuXHJcbiAgICBOZXdTdGFydFggPSBubXggLSBmICogKG5teCAtIFN0YXJ0WCk7XHJcbiAgICBOZXdFbmRYID0gbm14IC0gZiAqIChubXggLSBFbmRYKTtcclxuXHJcbiAgICBOZXdTdGFydFkgPSBubXkgLSBmICogKG5teSAtIFN0YXJ0WSk7XHJcbiAgICBOZXdFbmRZID0gbm15IC0gZiAqIChubXkgLSBFbmRZKTtcclxuXHJcbiAgICBTdGFydFggPSBOZXdTdGFydFg7XHJcbiAgICBTdGFydFkgPSBOZXdTdGFydFk7XHJcbiAgICBFbmRYID0gTmV3RW5kWDtcclxuICAgIEVuZFkgPSBOZXdFbmRZO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb25Ub3VjaEVuZChlKSB7XHJcbiAgaWYgKHNjYWxpbmcpIHtcclxuICAgIHBpbmNoRW5kKGUpO1xyXG4gICAgc2NhbGluZyA9IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcclxuICBpbml0R0woKTtcclxuICBjb25zdCBkcmF3ID0gKCkgPT4ge1xyXG4gICAgcmVuZGVyKCk7XHJcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xyXG4gIH07XHJcbiAgZHJhdygpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztFQUFB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
